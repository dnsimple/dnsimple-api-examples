name: Terraform Plan
on:
  workflow_call:
    inputs:
      config-directory:
        required: true
        type: string
      tf-workspace:
        required: true
        type: string

env:
  TF_CLOUD_ORGANIZATION: "DNSimple"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ inputs.tf-workspace }}"
  CONFIG_DIRECTORY: "${{ inputs.config-directory }}"

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "${{ inputs.config-directory }}"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Comment on pull request for Formatting
        if: ${{ steps.fmt.outcome != 'success' }}
        uses: actions/github-script@v6
        env:
          FMT: "terraform\n${{ steps.fmt.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 3
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

            Format check failed ‚ùå.

            <details><summary>Show Format</summary>

            \`\`\`\n
            ${process.env.FMT}
            \`\`\`

            </details>

            To fix formatting errors run \`terraform fmt\`.

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Comment on pull request for Validation
        if: ${{ steps.validate.outcome != 'success' }}
        uses: actions/github-script@v6
        env:
          VALIDATE: "terraform\n${{ steps.validate.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 3
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            Validation failed ‚ùå.

            <details><summary>Show Validation</summary>

            \`\`\`\n
            ${process.env.VALIDATE}
            \`\`\`

            </details>

            To fix validation errors run \`terraform validate\`.

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.4
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
              \`\`\`
              Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
              \`\`\`
              [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
              `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
